`timescale 1 ps/ 1 ps
module decode_vlg_tst();
// constants                                           
// test vector input registers
reg clk;
reg [7:0] indata_8;
reg rst_n;
reg [191:0]data;
// wires                                               
wire hdb3_out;

// assign statements (if any)                          
decode i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.hdb3_out(hdb3_out),
	.indata_8(indata_8),
	.rst_n(rst_n)
);
initial begin
	clk<=0;
	rst_n<=0;
	data <= 192'hff_80_80_00_ff_80_80_80_ff_00_80_ff_00_80_ff_00_80_80_00_ff_00_ff_00_80;
	#20 rst_n<=1;
	#(10*200) $stop;
end

always #10 clk<=~clk;

always begin
	#20 indata_8 <= data[191:184];
	#20 indata_8 <= data[183:176];
	#20 indata_8 <= data[175:168];
	#20 indata_8 <= data[167:160];
	#20 indata_8 <= data[159:152];
	#20 indata_8 <= data[151:144];
	#20 indata_8 <= data[143:136];
	#20 indata_8 <= data[135:128];
	#20 indata_8 <= data[127:120];
	#20 indata_8 <= data[119:112];
	#20 indata_8 <= data[111:104];
	#20 indata_8 <= data[103:96];
	#20 indata_8 <= data[95:88];
	#20 indata_8 <= data[87:80];
	#20 indata_8 <= data[79:72];
	#20 indata_8 <= data[71:64];
	#20 indata_8 <= data[63:56];
	#20 indata_8 <= data[55:48];
	#20 indata_8 <= data[47:40];
	#20 indata_8 <= data[39:32];
	#20 indata_8 <= data[31:24];
	#20 indata_8 <= data[23:16];
	#20 indata_8 <= data[15:8];
	#20 indata_8 <= data[7:0];
end
                                 
endmodule

